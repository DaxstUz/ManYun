package com.ch.mhy.widget;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.PointF;
import android.os.Handler;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;

import com.ch.mhy.R;
import com.ch.mhy.activity.book.ReadingActivity;
import com.ch.mhy.listener.Add;
import com.ch.mhy.net.NetReceiver;
import com.ch.mhy.util.ShowOperate;
import com.ch.mhy.util.Utils;

/**
 * 广告图片自动轮播控件</br>
 * <p/>
 * <pre>
 *   集合ViewPager和指示器的一个轮播控件，主要用于一般常见的广告图片轮播，具有自动轮播和手动轮播功能
 *   使用：只需在xml文件中使用{@code <com.minking.imagecycleview.ImageCycleView/>} ，
 *   然后在页面中调用  {@link #setImageResources(ArrayList, ImageCycleViewListener) }即可!
 *
 *   另外提供{@link #startImageCycle() } \ {@link #pushImageCycle() }两种方法，用于在Activity不可见之时节省资源；
 *   因为自动轮播需要进行控制，有利于内存管理
 * </pre>
 *
 * @author minking
 */
public class ImageCycleView2 extends LinearLayout implements ShowOperate{

    /**
     * 上下文
     */
    private Context mContext;

    /**
     * 图片轮播视图
     */
    public MyViewPager mAdvPager = null;

    /**
     * 滚动图片视图适配器
     */
    private ImageCycleAdapter mAdvAdapter;

    /**
     * 滚动图片指示器-视图列表
     */
    public ImageView[] mImageViews = null;

    /**
     * 图片滚动当前图片下标
     */
    public int mImageIndex = 0;

    /**
     * 手机密度
     */
    private float mScale;
    
    private Add add;

    /**
     * @param context
     */
    public ImageCycleView2(Context context) {
        super(context);
    }

    /**
     * @param context
     * @param attrs
     */
    public ImageCycleView2(Context context, AttributeSet attrs) {
        super(context, attrs);
        
        Utils.map=new HashMap<String, Boolean>();
        mContext = context;
        mScale = context.getResources().getDisplayMetrics().density;
        LayoutInflater.from(context).inflate(R.layout.ad_cycle_view2, this);
        mAdvPager = (MyViewPager) findViewById(R.id.adv_pager);
        mAdvPager.setScroll(false);
        mAdvPager.setOnPageChangeListener(new GuidePageChangeListener());
        mAdvPager.setOffscreenPageLimit(9);//设置预加载的数量
    }

    
    ArrayList<String> imageUrlList;
    /**
     * 装填图片数据
     *
     * @param imageUrlList
     * @param imageCycleViewListener
     */
    public void setImageResources(ArrayList<String> imageUrlList, ImageCycleViewListener imageCycleViewListener,Add add) {
    	mImageIndex=Utils.rindex;
    	if(mImageIndex<1){
    		mImageIndex=1;
    	}
    	this.add=add;
    	this.imageUrlList=imageUrlList;
        // 图片广告数量
        final int imageCount = imageUrlList.size();
        mImageViews = new ImageView[imageCount];
        mAdvAdapter = new ImageCycleAdapter(mContext, imageUrlList, imageCycleViewListener, add);
        mAdvPager.setAdapter(mAdvAdapter);
        mAdvPager.setCurrentItem(mImageIndex);
    }


    private Handler mHandler = new Handler();


    /**
     * 轮播图片状态监听器
     *
     * @author minking
     */
    private final class GuidePageChangeListener implements OnPageChangeListener {

        @Override
        public void onPageScrollStateChanged(int state) {
        }

        @Override
        public void onPageScrolled(int arg0, float arg1, int arg2) {
        }

        @Override
        public void onPageSelected(int index) {
        	mAdvPager.setBackgroundResource(0);
            // 设置当前显示的图片下标
            mImageIndex = index;
            
            /*判断是否是缺失页 false为缺失页*/
            boolean isload=true;
            if(imageUrlList.get(index).indexOf("d17a64a81f1f4e388196b80c34dc5feb")>-1){//图片缺失
            	isload=false;
            }
            
            /*是缺失页才开启加载动画，否则不开启*/
            if(NetReceiver.isConnected(mContext)!= NetReceiver.NetState.NET_NO&&isload&&isload&&!Utils.map.containsKey(imageUrlList.get(index))){
            	Utils.map.put(imageUrlList.get(index), false);
            	add.start(imageUrlList.get(index));
            }else{
            	if(NetReceiver.isConnected(mContext)!= NetReceiver.NetState.NET_NO&&isload&&!Utils.map.get(imageUrlList.get(index))){
            		add.start(imageUrlList.get(index));
            	}
            }
            
            /*判断是否请求下一话*/
            if(index==imageUrlList.size()-1){
            	mImageIndex=imageUrlList.size()-2;
            	add.getNewData("asc");
            	mAdvPager.setCurrentItem(mImageIndex);
            }
            
            /*默认显示第一张*/
            if(index==0){
            	mImageIndex=1;
            	mAdvPager.setCurrentItem(mImageIndex);
            	add.getNewData("desc");
            }
            
            /*更新当前显示第几页*/
            if(index<=imageUrlList.size()-1){
            	add.updateIndex();
            }
        }

    }
    
    /**
     * 图片资源列表
     */
    private ArrayList<String> mAdList = new ArrayList<String>();

    boolean flag = true;//弹出亮度调节框点消失时不进行上下翻页动作标记
    @SuppressLint("ClickableViewAccessibility")
	private class ImageCycleAdapter extends PagerAdapter {

        /**
         * 图片视图缓存列表
         */
        private ArrayList<ImageView> mImageViewCacheList;
        
        /**
         * 广告图片点击监听器
         */
        private ImageCycleViewListener mImageCycleViewListener;

        private Context mContext;

        private Add add;
        public ImageCycleAdapter(Context context, ArrayList<String> adList, ImageCycleViewListener imageCycleViewListener, Add add) {
            mContext = context;
            mAdList = adList;
            mImageCycleViewListener = imageCycleViewListener;
            mImageViewCacheList = new ArrayList<ImageView>();
            this.add = add;
        }

        @Override
        public int getCount() {
            return mAdList.size();
        }

        @Override
        public boolean isViewFromObject(View view, Object obj) {
            return view == obj;
        }
        
        @Override
		public void destroyItem(View container, int position, Object object) {
        	LinearLayout ll = (LinearLayout) object;
        	TouchImageView view = (TouchImageView) ll.getChildAt(0);
        	Bitmap bit=view.getDrawingCache();
        	view.setImageResource(0);
        	if(bit!=null){
        		bit.recycle();
        	}
	        ((ViewPager) container).removeView(ll);
		}

		int width=Utils.getScreenDispaly()[0];
		int height=Utils.getScreenDispaly()[1];
		LinearLayout.LayoutParams params = 
				new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
        @Override
        public Object instantiateItem(ViewGroup container, final int position) {
            String imageUrl = mAdList.get(position);
            LinearLayout rl = new LinearLayout(mContext);
            params.gravity = Gravity.CENTER; 
            rl.setLayoutParams(params);
            TouchImageView imageView = null;
            if (mImageViewCacheList.isEmpty()) {
                imageView = new TouchImageView(mContext);
                imageView.setScaleType(ScaleType.MATRIX);
                LayoutParams lp=  new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
                lp.gravity=Gravity.CENTER_VERTICAL;
                imageView.setLayoutParams(lp);
            } else {
                imageView = (TouchImageView) mImageViewCacheList.remove(0);
                imageView.setScaleType(ScaleType.MATRIX);
            }
            imageView.setOnTouchListener(new OnTouchListener() {
            	float distance = 0;
            	int count = 0;
            	 float fixTransX;
            	 float fixTransY;
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                	TouchImageView view = (TouchImageView)v;
                	view.mScaleDetector.onTouchEvent(event);  
                    PointF curr = new PointF(event.getX(), event.getY());  
                    count++;
                    switch (event.getAction()) {
                            case MotionEvent.ACTION_DOWN:  
                            	view.last.set(curr);  
                            	view.start.set(view.last);  
                            	view.mode =view. DRAG;
                            	if(((ReadingActivity)add).getLayout().getChildAt(1) instanceof View){
                            		 if (((ReadingActivity)add).getLayout().getChildAt(1).findViewById(R.id.sb_light)!=null) {
                            			 flag = false;
                            			 ((ReadingActivity)add).getLayout().removeViewAt(1);
                            			 return flag;
									}
                            	}else{
                            		flag = true;
                            	}
                            	if(view.saveScale>1){
                             	   mAdvPager.setScroll(true);
                             	}
                                break;
                                  
                            case MotionEvent.ACTION_MOVE:  
                                if (view.mode == view.DRAG) { 
                                	mAdvPager.setScroll(true);
                                    float deltaX = curr.x - view.last.x;
                                    float deltaY = curr.y - view.last.y;
                                    
                                    float[] values = new float[9];
                                    view.getImageMatrix().getValues(values);
                                    
                                    float sc = values[0];
                                    float leftX = values[2];
                                    float topY = values[5];
                                    
//                                    Log.e("tag", "右边界="+(leftX + view.mImageWidth*sc) +"<="+ width +", 放大倍数="+sc);
                                    boolean isLeft = (deltaX>0 && leftX>=0);
                                    boolean isRight = (deltaX<0 &&(int) (leftX + view.mImageWidth*sc) <= width);
                                    boolean isTop = (deltaY>0 && topY >= 10);
                                    boolean isBot = (deltaY<0 && topY + view.mImageHeight + 20 <= height);
                                    if(isLeft || isRight || (isBot && isLeft) || (isBot && isRight)
                                    	|| (isTop && isLeft) || (isTop && isRight)){
                                    	mAdvPager.setScroll(false);
                                    }else{
                                    	moveTo(view, curr, deltaX, deltaY);
                                    }
                                    count=0;
                                }
                                break;  
                            case MotionEvent.ACTION_UP:
                            	
                            	if(count<=3&&distance<=0.2)
                                 ((ReadingActivity)add).onSingleTapUp(event);
                            	count=0;
                            	distance=0;
                            	view.mode = view.NONE;  
                                int xDiff = (int) Math.abs(curr.x - view.start.x);  
                                int yDiff = (int) Math.abs(curr.y - view.start.y);  
                                if (xDiff < view.CLICK && yDiff < view.CLICK)  
                                    performClick();  
                                break;  
          
                            case MotionEvent.ACTION_POINTER_UP:  
                            	view.mode = view.NONE;  
                                break;  
                        }  
                          
                        view.setImageMatrix(view.matrix);
                        invalidate();  
                        return true; // indicate event was handled  
                	
                }
				private void moveTo(TouchImageView view, PointF curr,
						float deltaX, float deltaY) {
					distance = Math.abs(deltaX-deltaY);
					fixTransX = view.getFixDragTrans(deltaX, view.viewWidth, view.origWidth * view.saveScale);  
					fixTransY = view.getFixDragTrans(deltaY, view.viewHeight, view.origHeight * view.saveScale);  
					view.matrix.postTranslate(fixTransX, fixTransY);  
					view.fixTrans();  
					view.last.set(curr.x, curr.y);
				}
            });
            
            imageView.setTag(imageUrl);
            rl.addView(imageView);
            container.addView(rl);
            mImageCycleViewListener.displayImage(imageUrl, imageView,Utils.map);
      	  
            return rl;
        }
        
    }
    

    /**
     * 轮播控件的监听事件
     *
     * @author minking
     */
    public static interface ImageCycleViewListener {

        /**
         * 加载图片资源
         *
         * @param imageURL
         * @param imageView
         */
        public void displayImage(String imageURL, ImageView imageView,Map<String, Boolean> map);

        /**
         * 单击图片事件
         *
         * @param position
         * @param imageView
         */
        public void onImageClick(int position, View imageView);
        
        
        
    }

    @Override
    public void next() {
        if (mImageViews != null&&flag) {
            // 下标等于图片列表长度说明已滚动到最后一张图片,重置下标
            if ((++mImageIndex) >= mImageViews.length-1) {
            	mImageIndex= mImageViews.length-1;
                add.getNewData("asc");
            }else{
            	if(mAdvPager.getChildAt(0) instanceof TouchImageView){
            		((TouchImageView)mAdvPager.getChildAt(0)).saveScale = 1.0f;
            	}
            	mAdvPager.setCurrentItem(mImageIndex);
            }
        }
    }

    @Override
    public void pre() {
        if (mImageViews != null&&flag) {
            // 下标等于图片列表长度说明已滚动到最后一张图片,重置下标
            if ((--mImageIndex) <= 0) {
            	mImageIndex=1;
                add.getNewData("desc");
            }else{
            	mAdvPager.setCurrentItem(mImageIndex);
            }
        }
    }
    
    public void seeByProcess(){
    		if(mImageIndex<imageUrlList.size()){
    			mAdvPager.setCurrentItem(mImageIndex);
    		}
    }
}
