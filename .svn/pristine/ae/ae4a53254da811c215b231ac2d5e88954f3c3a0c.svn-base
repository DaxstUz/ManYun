package com.ch.mhy.util;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

/**
 * 文件简单加密
 * @author xc.li
 *
 */
public class FileUtil {
	
	/**
	 * 将文件简单加密
	 * @param in 文件输入流
	 * @param dircPath 保存路径，文件名可以不用后缀
	 * @param xor 加密密码，如123;8进制，16进制都可以
	 * @return
	 */
	public static boolean encodeFile(InputStream in, String dircPath, int xor){
		boolean success = true;
		int b;
		try {
			BufferedInputStream bis = new BufferedInputStream(in);
			BufferedOutputStream bos =new BufferedOutputStream(new FileOutputStream(dircPath));
			while((b = bis.read()) != -1){
				bos.write(b^xor);
			}
			bis.close();
			bos.close();
		} catch (IOException e) {
			success = false;
			e.printStackTrace();
		}
		return success;
	}
	
	/**
	 * 解密加密后的图片文件
	 * @param filePath 密文路径
	 * @param xor 解密密码（同加密密码）
	 * @return
	 */
	public static Bitmap decodeImageFile(String filePath, int xor){
		int b;
		Bitmap bitmap = null;
		File f = new File(filePath);
		try {
			if(f.exists() && f.isFile()){
				FileInputStream in = new FileInputStream(f);
				BufferedInputStream bis = new BufferedInputStream(in);
				List<Byte> list = new ArrayList<Byte>();
				while((b = bis.read()) != -1){
					list.add(Byte.valueOf((byte)(b^xor)));
				}
				in.close();
				bis.close();
				byte[] byteArr = new byte[list.size()];
				for(int i=0; i<list.size(); i++){
					byteArr[i] = list.get(i);
				}
				bitmap = BitmapFactory.decodeByteArray(byteArr, 0, list.size());
			}else{//图片不存在
				
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return bitmap;
	}

	/**
	 * 将assets下的文件按行读取到map
	 * 文件内容为按行存储 key=value 格式
	 * @param filePath
	 * @param context
	 * @return
	 */
	public static HashMap<String, Object> readFileToMap(String filePath, Context context){
		AssetManager assetMag = context.getAssets();
		HashMap<String, Object> keyMap = new HashMap<String, Object>();
		try {
			InputStream in = assetMag.open(filePath);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			String line = null;
			while((line = br.readLine()) != null){
				String[] keyVal = line.trim().split("=");
				if(keyVal.length==2){
					keyMap.put(keyVal[0].trim(), keyVal[1].trim());
				}else{
					keyMap.put(keyVal[0].trim(), "");
				}
			}
			br.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			
		}
		return keyMap;
			
	}
	
	
	
	 /**
     * 删除单个文件
     * @param   filePath    被删除文件的文件名
     * @return 文件删除成功返回true，否则返回false
     */
    public static boolean deleteFile(String filePath) {
    File file = new File(filePath);
        if (file.isFile() && file.exists()) {
        return file.delete();
        }
        return false;
    }

    /**
     * 删除文件夹以及目录下的文件
     * @param   filePath 被删除目录的文件路径
     * @return  目录删除成功返回true，否则返回false
     */
    public static boolean deleteDirectory(String filePath) {
    boolean flag = false;
        //如果filePath不以文件分隔符结尾，自动添加文件分隔符
        if (!filePath.endsWith(File.separator)) {
            filePath = filePath + File.separator;
        }
        File dirFile = new File(filePath);
        if (!dirFile.exists() || !dirFile.isDirectory()) {
            return false;
        }
        flag = true;
        File[] files = dirFile.listFiles();
        //遍历删除文件夹下的所有文件(包括子目录)
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
            //删除子文件
                flag = deleteFile(files[i].getAbsolutePath());
                if (!flag) break;
            } else {
            //删除子目录
                flag = deleteDirectory(files[i].getAbsolutePath());
                if (!flag) break;
            }
        }
        if (!flag) return false;
        //删除当前空目录
        return dirFile.delete();
    }

    
    /**
     *  根据路径删除指定的目录或文件，无论存在与否
     *@param filePath  要删除的目录或文件
     *@return 删除成功返回 true，否则返回 false。
     */
    public boolean DeleteFolder(String filePath) {
    File file = new File(filePath);
        if (!file.exists()) {
            return false;
        } else {
            if (file.isFile()) {
            // 为文件时调用删除文件方法
                return deleteFile(filePath);
            } else {
            // 为目录时调用删除目录方法
                return deleteDirectory(filePath);
            }
        }
    }
    
}
